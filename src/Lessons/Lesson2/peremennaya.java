package Lessons.Lesson2;

public class peremennaya { //примитивные переменные
    // variables (переменная на русс)
    public static void main(String[] args) {
        int x = 5; //целые числа (на 32 бита) (от -2млдр до 2 млдр)
        short y = 15; //целые числа (на 16 бит) (от -32000 до 32000)
        long cat = 48L; //целые числа (64 бита) однако что бы long работал в конце чиса нужно поставить "L" or "l"
        // лучше использовать заглавные буквы "L","F" и тд., т.к. маленькие могут походить на числа и путать.


        double name = 2343.65; //дроби,сотые чилса (на 64 бита)
        float drag = (float) 34.4; //дроби,сотые (на 32 бита). Компилятор по умолчанию при дробных числах выберет переменную
        // "double" , если нужно "float" в конце числа добавить "f" or "F" - "234.54f"*/


        char c1 = 'a'; /* - символы. Все символы писать в одинарных кавычках - '' -. Символ можеть быть только один
                      символ может быть любым,любого языка,чилса. "ас" - ошибка,символ только один.*/
        char c2 = 300; /* если число без одинарных ковычек оно воспринимается как символ в "Юникоде" - спец.азбука
                         символов. В данном случае 300-тый символ в Юникоде. Этот способ использует 10-чную систему
                          исчесления. */
        char c3 = '\u2B3A';  /*Особенность этого способа в том,что после \ u (пишется слитно,но компилятор
                              ругаеться если закоментировать юникод)  нужно использовать 4 символы,нельзя меньше
                              или больше. Использовать можно как цифры,буквы, так и все вместе. Использует все тот же
                               Юникод. Разница в системе исчесления. В данном случае она 16-тичная. Помимо привычных
                               нами чисел мы можем пользоваться буквами: A,B,C,D,E,F.
                               Однако одинаковые символы хранят в себе разные значения:
                                char c2 = 2567 и char c3 = '\u2567' - выдадут разныесимволы. А вот
                                char c2 = 768 и char c3 = '\u2567' - одинаковые, т.к. 768 в переводе с 10-й
                                 на 16-ную систему.*/
        char y0 = 'a';
        int y1 = 10;
        int y98 = y1; //y98 примет значение не 'a',а 97.
        System.out.println(y0 + y1);//ответ будет 107. 'a' в Юникоде занимает 97 символ,что значит компилятор считает:
        //10+97=107. Мы также может это значение присвоить другому типу ,в примере типу int, и
        //в любыве другие,самое главное что бы выбранный нами тип влезал по диапазону.
        //но типу char не может присвоить значение другого типа из-за отсуствия отрицательныхх чисел,его диапазон
        //от 0 до 65535, а остальные начинаються с -128 и т.п.


        boolean home = true; //принимает false\true

        byte meByte = 120; //числа (на 8 бит) (от -128 до 128)


        //Всего 4 основных типа систем исчеслений:
        int n1 = 60; // 10-чная система

        int n2 = 0B111100;// двоичная система.(0,1) Что бы компилятор понимал в какой системе мы хотим записать значение
        int n3 = 0b111100;// нужно написать "0В" или "0в" (разницы нет). При запуске программы компилятор выведет число
        //компилятор выведет число на экран в десятичной системе,в нашем случае "60".

        int n4 = 074;      //8-ричная система. (0-7). Для индетификации компилятором системы исчесления используеться
        // "0" перед числом. На экран выведет результат в 10-й системе. То есть 60.

        int n5 = 0X3C;     //16-тичная система. (0 - F). ля индетификации компилятором системы исчесления используеться
        int n6 = 0x3c;     // "0x" в начале. Все буквы можно использовать как маленькие так и большие (логика остаеться
        // прежней. На экран выведет результат в 10-й системе. То есть 60.
        int n7 = 1_000_000_00___0; //"__"(underscore) - нужен для удобства чтения ,к примеру, больших чисел.
        //его можно использовать где,сколько,как угодно - компилятром он не читаеться.
        // Однако есть правила: 1. Нельзя использовать в начале и конце числа.
        // 2. До и после точки в дробных числах. 3. До и после букв: L,l,F,f,D,d.
        // 3. До,после и между : 0X,0x,0B,0b. Исключение:
        // Символ "_" можно использовать после "0",который исп. в 8-ном формате.
    }
}
