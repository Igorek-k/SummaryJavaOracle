package Lessons.Lesson4;
//Практический пример есть в Homework 4:

public class Class_object {
    /* класс это как чертеж, а объект его экземпляр. К примеру класс - чертеж дома, а объект - построенный дом.
    Так же из-за одного чертежа можно построить множество домов.

    Структура Джавы:
    1. The package statement.
    2. The import statement.
    3. Class declaration and definition:
         - Comments
         - Variables (State)
         - Methods (Behavior)
         - Constructors

         Для того,что бы компилятор не выдавал ошибку, название класса и название файла - должно иметь одинаковое имя.
         Но в одном файле можно создать несколько классов. ВНИМАНИЕ: public class может быть только 1 в этом файле,
         и он как раз и должен соотвествовать имени файла. Создавать множество классов с разными именами можно написав:
          */
    class Hello {   //Наглядный пример в Homework_4

    }

    /* Это будет отдельный класс, создавать их можно несколько. В файле может и вовсе не быть public class, в таком
    случае имя файла должно совпадать хотя-бы с одним извсех существующих обычных классов.
    При запуске программы Idea будет уточнять какой именно класс ей нужно запустить. НО что бы запустить
       какой-то класс нужен метод main:

       public static void main(String[] args) {
       }
        и писать код в фигурных скобках данного метода. Этот метод является точкой входа, без него программа не
          запуститься. Если программа без этого метода она называется: "don't execute" -не выполнима(выполняеться),
          а если метод есть и программа запускаеться ,то "execute"

         Как мы знаем, создавать переменные можно n-кол-во, главное что бы памяти хватило, их так же можно создавать
          и за методом main, но самое главное внутри класса ( можно и совершенно другого класса)
          Вот короткий отрывок примера с Homework 4:
          */
    class Student {   //в этом классе мы создали переменные без присваивания значения.
        //Переменные создающиеся вне методе main называются instance.
        int numberStudak;  // По этому по дефолту значение у чисельных типов : 0, 0.0.
        String name;            //а у строчных,именных : null (в переводе ничто)
        String Surname;            //однако их можно задать значение и же по дефолту будут использоваться те значения,
        String year;   //которые мы установили по дефолту. Сейчас int numberStudak = 0, но если мы присвоем ему число
        // "10", то при выводе на экран ("int numberStudak") мы увидим 10,если не присвоим-дефолт знач."0".

    }

    class StudentTest {
        public void main(String[] args) {
            Student Me = new Student(); //Каждое название класса являеться referense типом (ссылочным) в джаве,
            // по этому их бесчисленное множество. Мы апперируем классом созданым выше в текущем. Для того,что бы
            Me.numberStudak = 7854;    //создать объект мы вызываем конструктор: new Student().
            Me.name = "Igor";
            Me.Surname = "Stupalov";
            Me.year = "4-th years";

            // Student Me = new Student(); Student - тип переменной, Me - имя, new Student() - вызов конструктора,
            //создание объекта.
        /* Примитивные типы переменных содержат в себе значение: int a =10; int хранит значение 10,под именем "а", а
             ссылочные хранят ссылку на объект. При создании объекта он  находиться где-то в памяти и тип referense
             хранит путь к нему,ссылку. Можно задать несколько таких типов переменных к одному объекту, но нельзя
               что бы одна и таже переменная ссылалась сразу на два разных объекта. Одна переменная = один объект,
               две переменные = один объект и тд.
         */
            Student Friend = new Student(); //адресс объекта "new Student" мы присвоили "Friend".
            Student Girlfriend = new Student(); //адресс объекта "new Student" мы присвоили "Girlfriend".

            // Для дальнейшей работы с этими переменными мы вызываем их,ставим точку и обращаемся к переменным заданным,
            // в нашем случае, в предыдущем классе что бы присвоить им значение:
            Me.numberStudak = 7854;
            Me.name = "Igor";
            Me.Surname = "Stupalov";
            Me.year = "4-th years";

            Friend.numberStudak = 9352;
            Friend.name = "Andrey";
            Friend.Surname = "Kirkorov";
            Friend.year = "3-th years";

            Girlfriend.numberStudak = 7989;
            Girlfriend.name = "Ekaterina";
            Girlfriend.Surname = "Novickaya";
            Girlfriend.year = "4-th years";

            System.out.println(Me.numberStudak ); //выведет на экран присвоенные значение,в этом примере : 7854.
            System.out.println( Friend.Surname);  //выведет на экран присвоенные значение,в этом примере : Kirkorov.
            System.out.println(Girlfriend.year);  //выведет на экран присвоенные значение,в этом примере : 4-th years.

             /*Два способа создания типа String:
          1. String name = "Igor";
          2. String name = new String("Igor");  - String это тоже ссылочный тип,но он "особенный" т.к. можно
            использовать как примитивный. Он единственный из ссылочных,который так может. Во всех остальных случаях
             вызываем конструктор.
         */

        }
    }
}
