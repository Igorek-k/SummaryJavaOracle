package Lessons.Lesson9;

public class Car {
    String color; //instance variables ( object variable)
    String engine;
    static int count; //static variables

 public   Car(String color,String engine){
        count++;
        this.color = color; //color and engine - instance variables
        this.engine = engine; //color1 and engine1 - parameter
    } //что бы не утруждать себя постоянным изменением имени в параметрах нужно использовать this,как в примере выше
// что бы правильно использовать Instance переменные добавляем this.пишем имя Instance переменной и присваиваем ей значения
    //к примеру this.color это тот,который принадлежит объетку (инстанс) ,а color принадлежит параметру.
    //this означает принадлежность к текущему объекту.

    public void showColor(){
     System.out.println("Цвет машины: "+ color);
     changeColor("red"); //мы можем легко вызвать в методе метод с того же класса без доп.создания нами объектов,
        //так как они уже идут по дефолту.
//        this.changeColor("red"); тоже самое. Эту часть this в первом случае компилятор создает сам.
    }
    public void changeColor(String color3){ //color3 - параметр. В данном случае параметр метода.Его можно использовать
//    int cena = color3;   параметр уже можно использовать.                                    //с самого начала
//    cena = 100; Мы не сможем её использовать в начале( в этом случае) так как она еще не создана/не определна.
        System.out.println("Цвет машины изменился");
      int cena = 5000;  //int cena local variables
      color=color3;
      cena+=1000;
    }
}

//В зависимости от пределов видимости переменные деляться на 4 группы: Local variables, parameter, instance variable,
                                                                                  //static variables.
// * Local variables - созданые внутри метода(конструктора) и не видны вне метода(конструкттора). Даже в том же классе,
//вне метода или в другом метода,даже если он в том же классе она уже не видна. Компилятор её видеть не будет. Пока
// мы не определим(создадим переменную ) мы не можем её использовать.Мы можем её использовать с начала
// создания и до конца блока. Блок заканчиваеться там,где заканчиваеться,к примеру, метод,в котором она создана.
//У ЛОКАЛЬНЫХ переменных дефолтного значения не бывает.
//Local variables - носят промежуточный характер. Они не имеют access modifier так и так они видны только внутри метода,
//конструктора. При попытки Local variables добавить access modifier компилятор выдаст ошибку.

// * Parameters - параметр конструктора,метода. Видимость почти такая же как и у Local variables,но её можно использовать
// с самого начала метода  и по конец блока,т.к. она была создана еще в параметре. Само собой все остальное как и у локальной.

// * Instance variable - то же самое ,что и object variable они пренадлежат объекту классa. Мы их можем использовать
//если внутри того же класса в методах ,конструктор или просто в классе текущем,если в другим класса ,то при создании
//объекта к которому инстанс переменные принадлежат.

//static variables - принадлежит всему классу,ведёт себя эта переменная как и инстанс,мы можем её написать где угодно.
//Она общая для всего класса,а не для объекта.


class ThisKw {
    //This keyword - нельзя использовать для обращения к переменнным и методам внутри static метода или при присваивании
// значения static переменной.
    int a =10;
//    static int b = this.a; так нельзя
//    static int t = a; даже так нельзя
    //Это касаеться и методов:

//  static void rema(int g){   в статическом методе тоже нельзя
//      this.a=g;   нельзя
//    a=g;           нельзя,но можно через создания конструктора:
//   Car x = new Car();
//      x.a = g;    так уже можно,но только переменная "а" будет изменять только для объекта ,который создан в данном
//  }                                 методе rema, то есть для локальной переменной.

    String color; //instance variables ( object variable)
    String engine;
    static int count;

    ThisKw(String color,String engine) {
        count++;  //можно так
        this.count++; //а можно и так
        this.color = color; //color and engine - instance variables
        this.engine = engine; //color1 and engine1 - parameter
    }
}

 //Не являеться ошибочным обращение с помощью this к static элементам!!(но рекомендуемым тоже не являеться)

