package Lessons.Lesson16;

public class Stringgg {
    //При создании объекта String, с использованием ключевого слово new и конструктора, мы ВСЕГДА создаем новый объект,
    //даже если параметры и значения этого объекта будут одинаковые.
    String s1 = new String("Hello");
    String s2 = new String("Hello");

    //У String есть свой резервуар памяти,который назывется String pool,в нем все объекты класса String
    //Когда мы создаем String без создания конструктора, то ДЖАВА не гарантирует,что создаст новый объект:
    String s3 = "HI";
    //Когда мы попытаемся создать еще один объект таким образом,без исп. конструктора:
    String s4 = "HI";
    /* Джава смотрит,есть ли в String pool объект с такими же значениями. Если объекта нет - создает,а если он уже есть,
     * то при попытке создания нового,он просто будет ссылаться на старый.
     *
     * То есть s3 и s4 будут ссылаться на один и тот же объект, который находится в String pool. И при каждом создании
     * такого класса String, без конструктора, все последующие String с одинаковыми значениями будут ссылаться на
     * первоначальный такой же объект.  */

    // При создании n-колво объектов класса String не использую new и конструктор и значение их будут одинаковые все
    //они будут ссылаться на 1 объект.

    public static void main(String[] args) {
        System.out.println("HI");
        System.out.println("HI");
        /* Ситуация аналогичная, джава проверяет есть ли в String pool такой объект,если есть, то зачем создавать новый
         * пусть ссылается на старый. Таким образом оба System.out.println, s3 ,s4 - все ссылаються на 1 объект!!
         */


        //String pool так же называют String constant pool, потому что объекты созданые в String pool менять уже не будут.

        String s5 = new String("OK");
        System.out.println("OK"==s5); //false. В конструкторе мы создали объект. Он не входит в String pool,а при написании
        // в sout "OK" - он создает объект в String pool и адресса у нмх в любом случае разные!
    }
}
